#!/usr/bin/bash

# Leggi il file JSON in una variabile
json=$(cat "/tmp/config.json")

# Crea le variabili leggendo dal JSON
partition_device=$(echo "$json" | jq -r '.partition.device')
partition_efi=$(echo "$json" | jq -r '.partition.efi')
root=$(echo "$json" | jq -r '.partition.root')
locale_locale=$(echo "$json" | jq -r '.locale.locale[0]')
locale_keymap=$(echo "$json" | jq -r '.locale.keymap')
locale_timezone=$(echo "$json" | jq -r '.locale.timezone')
country=$(echo "$json" | jq -r '.locale.reflector')
networking_hostname=$(echo "$json" | jq -r '.networking.hostname')
user_name=$(echo "$json" | jq -r '.users[0].name')
real_name=$(echo "$json" | jq -r '.users[0].rname')
user_password=$(echo "$json" | jq -r '.users[0].userpass')
user_shell=$(echo "$json" | jq -r '.users[0].shell')
root_password=$(echo "$json" | jq -r '.rootpass')
zr=$(echo "$json" | jq -r '.partition.zram')
zram="${zr}G"
kernel=$(echo "$json" | jq -r '.kernel')
key=$(echo "$json" | jq -r '.users[0].key')
#core="architalia-fonts core-gtk-theme core-gnome-backgrounds core-icons-theme core-keyring core-extensions-base core-terminal-nord-theme"
de="xorg gnome-shell gnome-control-center gnome-keyring gnome-terminal gnome-text-editor gnome-shell-extensions xdg-user-dirs-gtk xdg-user-dirs gvfs gdm"
base="networkmanager wpa_supplicant wireless_tools netctl net-tools iw cups alsa-utils pipewire-pulse mtools dosfstools exfatprogs fuse firewalld acpi cronie git wget reflector bluez bluez-utils"
generic="firefox timeshift evince eog gparted gsmartcontrol mpv gnome-calculator gnome-clocks gnome-calendar vim nano"
services="gdm NetworkManager firewalld bluetooth cronie reflector cups"

if [ "$partition_efi" = "true" ]; then

	uefi() {

		sgdisk --zap-all "/dev/$partition_device"
		parted -s "/dev/$partition_device" mklabel gpt
		parted -s "/dev/$partition_device" mkpart primary fat32 1MiB 1GiB
		parted -s "/dev/$partition_device" set 1 esp on
		parted -s "/dev/$partition_device" mkpart primary btrfs 1GiB "${root}M"
		parted -s "/dev/$partition_device" mkpart primary btrfs "${root}M" 100%

		mkfs.fat -F32 "/dev/$partition_device"1
		mkfs.btrfs -f "/dev/$partition_device"2
		mkfs.btrfs -f "/dev/$partition_device"3

		mount "/dev/$partition_device"2 /mnt
		btrfs su cr /mnt/@
		umount /mnt
		mount "/dev/$partition_device"3 /mnt
		btrfs su cr /mnt/@home

		umount /mnt
		mount -o noatime,ssd,space_cache=v2,compress=zstd,discard=async,subvol=@ "/dev/$partition_device"2 /mnt
		mkdir /mnt/home
		mount -o noatime,ssd,space_cache=v2,compress=zstd,discard=async,subvol=@home "/dev/$partition_device"3 /mnt/home
		mkdir /mnt/boot
		mount "/dev/$partition_device"1 /mnt/boot

		reflector --verbose -c $country -a 6 --sort rate --save /etc/pacman.d/mirrorlist
		pacstrap -K /mnt base base-devel $kernel linux-firmware intel-ucode btrfs-progs
		genfstab -U /mnt >/mnt/etc/fstab

		arch-chroot /mnt /bin/bash -c "locale-gen $locale_locale && echo LANG=$locale_locale > /etc/locale.conf && echo KEYMAP=$locale_keymap > /etc/vconsole.conf && ln -sf /usr/share/zoneinfo/$locale_timezone /etc/localtime"
		echo "$networking_hostname" >/mnt/etc/hostname

		# Creare un utente regolare
		arch-chroot /mnt /bin/bash -c "pacman -Sy $user_shell --noconfirm"
		arch-chroot /mnt /bin/bash -c "useradd -m -s /bin/$user_shell $user_name"
		arch-chroot /mnt /bin/bash -c "usermod -aG wheel $user_name"
		arch-chroot /mnt /bin/bash -c "usermod -c '$real_name' $user_name"

		# Impostare la password dell'utente regolare
		decrypted=$(echo "$user_password" | openssl enc -d -aes256 -base64 -k "$key")
		arch-chroot /mnt /bin/bash -c "echo $user_name:$decrypted| chpasswd"

		# crea profilo sudoers.d
		arch-chroot /mnt /bin/bash -c "echo '$user_name ALL=(ALL:ALL) ALL' >> /etc/sudoers.d/$user_name"

		# Impostare la password di root
		decrypted2=$(echo "$root_password" | openssl enc -d -aes256 -base64 -k "$key")
		arch-chroot /mnt /bin/bash -c "echo root:$decrypted2 | chpasswd"

		# Abilita e configura zram
		zrfstb="/dev/zram0 none swap defaults,pri=100 0 0 "
		zrx='ACTION=="add", KERNEL=="zram0", ATTR{comp_algorithm}="zstd", ATTR{disksize}="'$zram'", RUN="/usr/bin/mkswap -U clear /dev/%k" , TAG+="systemd"'
		arch-chroot /mnt /bin/bash -c "echo 'zram' > /etc/modules-load.d/zram.conf"
		arch-chroot /mnt /bin/bash -c "echo $zrx > /etc/udev/rules.d/99-zram.rules"
		arch-chroot /mnt /bin/bash -c "echo $zrfstb" >>/etc/fstab

		# Configura systemd-boot
		arch-chroot /mnt /bin/bash -c "pacman -Sy efibootmgr --noconfirm"
		arch-chroot /mnt /bin/bash -c "bootctl --path=/boot install && echo 'default arch-*' >> /boot/loader/loader.conf && echo 'timeout 5' >> /boot/loader/loader.conf && echo 'title Core Linux' > /boot/loader/entries/arch.conf && echo 'linux /vmlinuz-linux' >> /boot/loader/entries/arch.conf && echo 'initrd /initramfs-linux.img' >> /boot/loader/entries/arch.conf && echo 'options root=/dev/'$partition_device'2 rootflags=subvol=@ rw quiet loglevel=3 rd.system.show_status=auto rd.udev.log_level=3' >> /boot/loader/entries/arch.conf"

		# copia pacman.conf per installazione
		cp -rp /etc/pacman.conf /mnt/etc/

		# Installazione pacchetti
		arch-chroot /mnt /bin/bash -c "pacman -Sy $base $de $generic --noconfirm"
		arch-chroot /mnt /bin/bash -c "systemctl enable $services"

		# finalizzazione
		cp -rp /usr/bin/{core-brain,updates} /mnt/usr/bin/
		chmod -R 755 /mnt/usr/bin/{core-brain,updates}
		cp -rp /etc/dconf/.zshrc /mnt/home/$user_name/
		cp -rp /etc/dconf/zsh /mnt/etc/
		#cp -rp /etc/core  /mnt/etc/
		cp -rp /usr/share/fonts /mnt/usr/share/
		mkdir -p /mnt/home/$user_name/.config/autostart
		cp -rp /home/archie/.config/autostart/startx.desktop /mnt/home/$user_name/.config/autostart/
		cp -rp /etc/os-release /mnt/etc/
		cp -rp /home/archie/Templates /mnt/home/$user_name/

		# copia pacman.conf con richiesta firme
		cp -rp /etc/dconf/pacman.conf /mnt/etc/
	}
	uefi
else

	# Installazione su sistema legacy
	legacy() {
		# Cancellare completamente il disco specificato come "partition_device"
		sgdisk --zap-all "/dev/$partition_device"

		# Creare una tabella di partizione MBR
		parted -s "/dev/$partition_device" mklabel msdos

		# Crea una partizione root in BTRFS con sottovolume "@"
		parted -s "/dev/$partition_device" mkpart primary btrfs 1MiB "${root}M"

		# Crea una partizione home in BTRFS con sottovolume "@home"
		parted -s "/dev/$partition_device" mkpart primary btrfs "${root}M" 100%

		# Formattare la partizione root come BTRFS con sottovolume "@"
		mkfs.btrfs -f "/dev/$partition_device"1
		mount -o noatime,ssd,space_cache=v2,compress=zstd,discard=async,subvol=@ "/dev/$partition_device"1 /mnt
		mkdir /mnt/home

		# Formattare la partizione home come BTRFS con sottovolume "@home"
		mkfs.btrfs -f "/dev/$partition_device"2
		mount -o noatime,ssd,space_cache=v2,compress=zstd,discard=async,subvol=@home "/dev/$partition_device"2 /mnt/home

		# Reflector
		reflector --verbose -c $country -a 6 --sort rate --save /etc/pacman.d/mirrorlist

		# Installare il sistema di base
		pacstrap -K /mnt base base-devel $kernel linux-firmware intel-ucode btrfs-progs

		# Generare il file fstab
		genfstab -U /mnt >>/mnt/etc/fstab

		# Configurare il locale
		#cp /etc/locale.gen /mnt/etc/
		arch-chroot /mnt "locale-gen $locale_locale && echo LANG=$locale_locale > /etc/locale.conf && echo KEYMAP=$locale_keymap > /etc/vconsole.conf && ln -sf /usr/share/zoneinfo/$locale_timezone /etc/localtime"

		# Impostare il nome host
		echo "$networking_hostname" >/mnt/etc/hostname

		# Creare un utente regolare
		arch-chroot /mnt /bin/bash -c "pacman -Sy $user_shell --noconfirm"
		arch-chroot /mnt /bin/bash -c "useradd -m -s /bin/$user_shell $user_name"
		arch-chroot /mnt /bin/bash -c "usermod -aG wheel $user_name"
		arch-chroot /mnt /bin/bash -c "usermod -c '$real_name' $user_name"

		# Impostare la password dell'utente regolare
		decrypted=$(echo "$user_password" | openssl enc -d -aes256 -base64 -k "$key")
		arch-chroot /mnt /bin/bash -c "echo $user_name:$decrypted| chpasswd"

		# crea profilo sudoers.d
		arch-chroot /mnt /bin/bash -c "echo '$user_name ALL=(ALL:ALL) ALL' >> /etc/sudoers.d/$user_name"

		# Impostare la password di root
		decrypted2=$(echo "$root_password" | openssl enc -d -aes256 -base64 -k "$key")
		arch-chroot /mnt /bin/bash -c "echo root:$decrypted2 | chpasswd"

		# Abilita e configura zram
		zrfstb="/dev/zram0 none swap defaults,pri=100 0 0 "
		zrx='ACTION=="add", KERNEL=="zram0", ATTR{comp_algorithm}="zstd", ATTR{disksize}="'$zram'", RUN="/usr/bin/mkswap -U clear /dev/%k" , TAG+="systemd"'
		arch-chroot /mnt /bin/bash -c "echo 'zram' > /etc/modules-load.d/zram.conf"
		arch-chroot /mnt /bin/bash -c "echo $zrx > /etc/udev/rules.d/99-zram.rules"
		arch-chroot /mnt /bin/bash -c "echo $zrfstb" >>/etc/fstab

		# Configura GRUB
		arch-chroot /mnt /bin/bash -c "pacman -Syyu --noconfirm && pacman -S grub --noconfirm && grub-install --target=i386-pc /dev/$partition_device && grub-mkconfig -o /boot/grub/grub.cfg"

		# copia pacman.conf
		cp -rp /etc/pacman.conf /mnt/etc/

		# Installazione pacchetti
		arch-chroot /mnt /bin/bash -c "pacman -Sy $base $de $generic --noconfirm"
		arch-chroot /mnt /bin/bash -c "systemctl enable $services"

		# finalizzazione
		cp -rp /usr/bin/{core-brain,updates} /mnt/usr/bin/
		chmod -R 755 /mnt/usr/bin/{core-brain,updates}
		cp -rp /etc/dconf/.zshrc /mnt/home/$user_name/
		cp -rp /etc/dconf/zsh /mnt/etc/
		#cp -rp /etc/core  /mnt/etc/
		cp -rp /usr/share/fonts /mnt/usr/share/
		mkdir -p /mnt/home/$user_name/.config/autostart
		cp -rp /home/archie/.config/autostart/startx.desktop /mnt/home/$user_name/.config/autostart/
		cp -rp /etc/os-release /mnt/etc/
		cp -rp /home/archie/Templates /mnt/home/$user_name/

		# copia pacman.conf con richiesta firme
		cp -rp /etc/archie/pacman.conf /mnt/etc/
	}

	legacy

fi
